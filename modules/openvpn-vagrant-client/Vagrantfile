# - bring up the vpn
# - bring up the vagrant host.
# - start with: openvpn_user=openvpnas openvpn_user_pw=MYVPNPASSWORDFROMVAULT vagrant up
# ensure the version of virutal box installed matches all dependencies - VirtualBox 6.0.14:
# further notes on plugin versions at the end of this script

# Ensure you have the vagrant guest plugin:
# vagrant plugin install vagrant-vbguest

require 'json'

bridgenic = "en0: Wi-Fi (Wireless)" # eg: 'none' or 'en0: Wi-Fi (AirPort)'
resourcetier = ENV['resourcetier']

ip_addresses = JSON.parse(File.read(File.join(File.dirname(__FILE__), 'ip_addresses.json')))

network = 'public'
selected_ansible_version = 'latest'
syscontrol_gid = 9003
deployuser_uid = 9004
cache_apt = false

firehawkgateway_box = "bento/ubuntu-16.04"
box_version = "202102.02.0"

gateway_mac = ip_addresses["#{resourcetier}"]["gateway_mac"] # Generated by scripts/random_mac_unicast.sh
openfirehawkserver_ip = ip_addresses["#{resourcetier}"]["openfirehawkserver_ip"]
timezone_localpath = "/usr/share/zoneinfo/Australia/Adelaide" # The Ubuntu file path to configure time / date for your current onsite timezone
openfirehawkserver_name = "firehawkgateway#{resourcetier}"

# If box file in is not defined, we will use the bento base image and provision as normal.  Box file in is not the full box name, but numeric, usually marking a stage for CI

servers=[
  {
    :hostname => openfirehawkserver_name,
    :mac_string => gateway_mac,
    :ip => openfirehawkserver_ip,
    :bridgenic => bridgenic,
    :promisc => true,
    :box => firehawkgateway_box,
    :ram => 8192,
    :cpu => 4,
    :primary => false
  }
]

Vagrant.configure(2) do |config|
    config.vbguest.iso_path = "https://download.virtualbox.org/virtualbox/6.0.14/VBoxGuestAdditions_6.0.14.iso"
    config.vbguest.auto_update = false
    
    servers.each do |machine|
        config.vm.define machine[:hostname], primary: machine[:primary] do |node|
            node.vm.box = machine[:box]
            node.vm.hostname = machine[:hostname]

            node.vm.define machine[:hostname]
            node.vagrant.plugins = ['vagrant-vbguest', 'vagrant-reload']
            mac_string = machine[:mac_string]
            if network == 'public'
                # if you don't know the exact string for the bridgenic, eg '1) en0: Wi-Fi (AirPort)' then leave it as 'none'
                if bridgenic == 'none'
                    if mac_string == 'none'
                        node.vm.network "public_network", use_dhcp_assigned_default_route: true
                    else
                        node.vm.network "public_network", mac: mac_string, use_dhcp_assigned_default_route: true
                    end
                else
                    if mac_string == 'none'
                        node.vm.network "public_network", use_dhcp_assigned_default_route: true, bridge: bridgenic
                    else
                        node.vm.network "public_network", mac: mac_string, use_dhcp_assigned_default_route: true, bridge: bridgenic
                    end
                end
            else
                # use a private network mode if you don't have control over the network environment - eg wifi in a cafe / other location.
                if mac_string == 'none'
                    node.vm.network "private_network", use_dhcp_assigned_default_route: true
                else
                    node.vm.network "private_network", ip: machine[:ip], mac: mac_string, use_dhcp_assigned_default_route: true
                end
            end

            
            node.vm.provider "virtualbox" do |vb|
                vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 1000 ]
                # Display the VirtualBox GUI when booting the machine
                vb.gui = false
                # Promisc mode is needed for open vpn gateway to forward packets
                if machine[:promisc] == true
                    vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
                    vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
                end
                # Customize the amount of memory on the VM:
                vb.customize ["modifyvm", :id, "--memory", machine[:ram]]
                vb.customize ["modifyvm", :id, "--cpus", machine[:cpu]]
            end

            # if box_file_in.nil? || box_file_in.empty?
            # versions can not be specified with direct file paths for .boxes
            node.vm.box_version = box_version
            node.vm.provision "shell", inline: "echo 'create syscontrol group'"
            node.vm.provision "shell", inline: "getent group syscontrol || sudo groupadd -g #{syscontrol_gid} syscontrol"
            node.vm.provision "shell", inline: "sudo usermod -aG syscontrol vagrant"
            node.vm.provision "shell", inline: "id -u deployuser &>/dev/null || sudo useradd -m -s /bin/bash -U deployuser -u #{deployuser_uid}"
            node.vm.provision "shell", inline: "sudo usermod -aG syscontrol deployuser"
            node.vm.provision "shell", inline: "sudo usermod -aG sudo deployuser"
            # give deploy user initial passwordless sudo as with vagrant user.
            node.vm.provision "shell", inline: "touch /etc/sudoers.d/98_deployuser; grep -qxF 'deployuser ALL=(ALL) NOPASSWD:ALL' /etc/sudoers.d/98_deployuser || echo 'deployuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers.d/98_deployuser"
            # allow ssh access as deploy user
            # node.vm.provision "shell", inline: "mkdir -p /home/deployuser/.ssh; chown -R deployuser:deployuser /home/deployuser/.ssh; chmod 700 /home/deployuser/.ssh"
            node.vm.provision "shell", inline: "cp -fr /home/vagrant/.ssh /home/deployuser/; chown -R deployuser:deployuser /home/deployuser/.ssh; chown deployuser:deployuser /home/deployuser/.ssh/authorized_keys"
            # end
            # Allow deployuser to have passwordless sudo
            node.vm.synced_folder ".", "/vagrant", create: true, owner: "vagrant", group: "vagrant"
            node.vm.synced_folder ".", "/deployuser", owner: deployuser_uid, group: deployuser_uid, mount_options: ["uid=#{deployuser_uid}", "gid=#{deployuser_uid}"]
            node.vm.synced_folder "../secrets", "/secrets", create: true, owner: "deployuser", group: "deployuser", mount_options: ["uid=#{deployuser_uid}", "gid=#{deployuser_uid}"]

            # if box_file_in.nil? || box_file_in.empty?
            if cache_apt = true
                node.vm.provision "shell", inline: "sudo mkdir -p /deployuser/tmp/apt/$(hostname)"
                node.vm.provision "shell", inline: "sudo chmod u=rwX,g=rwX,o=rwX,g+s /deployuser/tmp/apt/$(hostname)"
                node.vm.provision "shell", inline: "sudo mkdir -p /deployuser/tmp/apt/$(hostname)/partial"
                node.vm.provision "shell", inline: "sudo chmod u=rwX,g=rwX,o=rwX,g+s /deployuser/tmp/apt/$(hostname)/partial"
                node.vm.provision "shell", inline: 'echo "Dir::Cache::Archives /deployuser/tmp/apt/$(hostname);" | sudo tee -a /etc/apt/apt.conf.d/00aptitude'
                node.vm.provision "shell", inline: 'echo "Dir::Cache /deployuser/tmp/apt/$(hostname);" | sudo tee -a /etc/apt/apt.conf.d/00aptitude'
            end
            # env run always
            node.vm.provision "shell", inline: "echo 'source /vagrant/scripts/env.sh' > /etc/profile.d/sa-environment.sh", :run => 'always'
            ### Install yq to query yaml
            node.vm.provision "shell", inline: "ip a"
            # node.vm.provision :reload
            # node.vm.provision "shell", inline: "echo 'Updating packages...'"
            # node.vm.provision "shell", inline: "export DEBIAN_FRONTEND=noninteractive; sudo apt-get update -y"
            # node.vm.provision "shell", inline: "sudo add-apt-repository ppa:rmescandon/yq -y"
            # node.vm.provision "shell", inline: "sudo apt-get update -y"
            # Check env
            node.vm.provision "shell", inline: "export DEBIAN_FRONTEND=noninteractive"
            node.vm.provision "shell", inline: "sudo rm /etc/localtime && sudo ln -s #{timezone_localpath} /etc/localtime", run: "always"
            node.vm.provision "shell", inline: "export DEBIAN_FRONTEND=noninteractive; sudo apt-get install -y sshpass moreutils python-netaddr"
            ### Install Ansible Block ###
            node.vm.provision "shell", inline: "export DEBIAN_FRONTEND=noninteractive; sudo apt-get install -y software-properties-common"
            
            if selected_ansible_version == 'latest'
                node.vm.provision "shell", inline: "echo 'installing latest version of ansible with apt-get'"
                node.vm.provision "shell", inline: "sudo apt-add-repository --yes --update ppa:ansible/ansible-2.9"
                node.vm.provision "shell", inline: "sudo apt-get install -y ansible"
            else
                # Installing a specific version of ansible with pip creates dependency issues pip potentially.
                node.vm.provision "shell", inline: "sudo apt-get install -y python-pip"
                node.vm.provision "shell", inline: "pip install --upgrade pip"    
                # to list available versions - pip install ansible==
                node.vm.provision "shell", inline: "sudo -H pip install ansible==#{ansible_version}"
            end
            # configure a connection timeout to prevent ansible from getting stuck when there is an ssh issue.
            node.vm.provision "shell", inline: "echo 'ConnectTimeout 60' >> /etc/ssh/ssh_config"
            # we define the location of the ansible hosts file in an environment variable.
            node.vm.provision "shell", inline: "grep -qxF 'ANSIBLE_INVENTORY=/vagrant/ansible/inventory/hosts' /etc/environment || echo 'ANSIBLE_INVENTORY=/vagrant/ansible/inventory/hosts' | sudo tee -a /etc/environment"
            node.vm.provision "shell", inline: <<-EOC
                sudo sed -i 's/.*PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config
            EOC
            node.vm.provision "shell", inline: "sudo reboot"
            node.vm.provision :reload
            node.trigger.after :up do |trigger|
                trigger.warn = "Restarted for SSH config service alteration"
            end
            if machine[:hostname].include? "firehawkgateway"
                node.vm.provision "shell", inline: "set -x; export openfirehawkserver_name=#{openfirehawkserver_name}; export openfirehawkserver_ip=#{openfirehawkserver_ip} ; /deployuser/scripts/init-gateway.sh --#{resourcetier} #{ENV['openvpn_user']} #{ENV['openvpn_user_pw']}"
            end
            node.vm.provision "shell", inline: "sudo reboot"
            node.vm.provision :reload
            node.vm.provision "shell", inline: "cd /vagrant; ansible-playbook ansible/openvpn.yaml -v --extra-vars \"variable_host=localhost openvpn_user=#{ENV['openvpn_user']} openvpn_user_pw=#{ENV['openvpn_user_pw']}\"" #, run: 'always' # Connect vpn always on reload
            node.vm.post_up_message = "Machine is up IP: #{machine[:box]}"

            node.trigger.before :destroy, :halt, :reload do |trigger|
                trigger.info = "Stopping node..."
                trigger.run = {inline: "echo 'stopping node'"}
                # trigger.run = {inline: "sleep 5"}
            end
        end
    end
    # if box_file_in.nil? || box_file_in.empty?
    VAGRANT_COMMAND = ARGV[0]
    if VAGRANT_COMMAND == "ssh"
        config.ssh.username = 'deployuser'
        config.ssh.extra_args = ["-t", "cd /deployuser; bash --login"]
    end
    # end
end